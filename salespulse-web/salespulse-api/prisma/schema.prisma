generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model customers {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  name            String            @db.VarChar(200)
  email           String?           @unique(map: "uq_customers_email") @db.VarChar(255)
  phone           String?           @db.VarChar(50)
  rfm_score       Decimal?          @db.Decimal(6, 2)
  segment         String?           @db.VarChar(32)
  created_at      DateTime          @default(now()) @db.Timestamp(0)
  orders          orders[]
  recommendations recommendations[]
}

model events {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt?  @db.UnsignedBigInt
  type       String   @db.VarChar(64)
  payload    Json?
  created_at DateTime @default(now()) @db.Timestamp(0)
  users      users?   @relation(fields: [user_id], references: [id], map: "fk_events_user")

  @@index([user_id], map: "fk_events_user")
  @@index([type, created_at], map: "idx_events_type_created")
}

model forecasts {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  product_id  BigInt   @db.UnsignedBigInt
  date        DateTime @db.Date
  demand_pred Int
  created_at  DateTime @default(now()) @db.Timestamp(0)
  products    products @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "fk_forecast_product")

  @@unique([product_id, date], map: "uq_forecast_product_date")
  @@index([date], map: "idx_forecast_date")
}

model order_items {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  order_id   BigInt   @db.UnsignedBigInt
  product_id BigInt   @db.UnsignedBigInt
  qty        Int
  price      Decimal  @db.Decimal(10, 2)
  orders     orders   @relation(fields: [order_id], references: [id], onDelete: Cascade, map: "fk_order_items_order")
  products   products @relation(fields: [product_id], references: [id], map: "fk_order_items_product")

  @@index([order_id], map: "idx_order_items_order")
  @@index([product_id], map: "idx_order_items_product")
}

model orders {
  id          BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  customer_id BigInt        @db.UnsignedBigInt
  total       Decimal       @db.Decimal(12, 2)
  status      orders_status @default(paid)
  created_at  DateTime      @default(now()) @db.Timestamp(0)
  order_items order_items[]
  customers   customers     @relation(fields: [customer_id], references: [id], map: "fk_orders_customer")

  @@index([created_at], map: "idx_orders_created")
  @@index([customer_id, created_at], map: "idx_orders_customer_created")
}

model products {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  name            String            @db.VarChar(200)
  sku             String            @unique(map: "uq_products_sku") @db.VarChar(100)
  price           Decimal           @db.Decimal(10, 2)
  stock_qty       Int               @default(0)
  category        String?           @db.VarChar(100)
  created_at      DateTime          @default(now()) @db.Timestamp(0)
  forecasts       forecasts[]
  order_items     order_items[]
  recommendations recommendations[]

  @@index([category], map: "idx_products_category")
}

model recommendations {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  customer_id BigInt    @db.UnsignedBigInt
  product_id  BigInt    @db.UnsignedBigInt
  score       Decimal   @db.Decimal(6, 5)
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  customers   customers @relation(fields: [customer_id], references: [id], onDelete: Cascade, map: "fk_reco_customer")
  products    products  @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "fk_reco_product")

  @@unique([customer_id, product_id], map: "uq_reco_customer_product")
  @@index([product_id], map: "fk_reco_product")
}

model users {
  id            BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  email         String     @unique(map: "uq_users_email") @db.VarChar(255)
  password_hash String     @db.VarChar(255)
  role          users_role @default(manager)
  created_at    DateTime   @default(now()) @db.Timestamp(0)
  updated_at    DateTime   @default(now()) @db.Timestamp(0)
  events        events[]
}

enum orders_status {
  pending
  paid
  shipped
  cancelled
  refunded
}

enum users_role {
  admin
  manager
  analyst
}
