generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// =======================
/// USERS & AUTH
/// =======================
model User {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  email        String     @unique(map: "uq_users_email") @db.VarChar(255)
  passwordHash String     @map("password_hash") @db.VarChar(255)
  role         users_role @default(manager)
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  events       Event[]

  @@map("users")
}

/// App/system events (e.g., login, job runs, domain events) optionally tied to a user
model Event {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  userId    BigInt?  @map("user_id") @db.UnsignedBigInt
  type      String   @db.VarChar(64)
  payload   Json?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  user      User?    @relation(fields: [userId], references: [id], map: "fk_events_user")

  @@index([userId], map: "fk_events_user")
  @@index([type, createdAt], map: "idx_events_type_created")
  @@map("events")
}

/// =======================
/// CATALOG
/// =======================
model Product {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  name            String            @db.VarChar(200)
  sku             String            @unique(map: "uq_products_sku") @db.VarChar(100)
  price           Decimal           @db.Decimal(10, 2)
  stockQty        Int               @default(0) @map("stock_qty")
  category        String?           @db.VarChar(100)
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  forecasts       forecasts[]
  orderItems      OrderItem[]
  recommendations recommendations[]

  @@index([category], map: "idx_products_category")
  @@map("products")
}

/// Optional customer table (handy for real stores)
model Customer {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  name            String            @db.VarChar(200)
  email           String?           @unique(map: "uq_customers_email") @db.VarChar(255)
  phone           String?           @db.VarChar(50)
  rfm_score       Decimal?          @db.Decimal(6, 2)
  segment         String?           @db.VarChar(32)
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  orders          Order[]
  recommendations recommendations[]

  @@map("customers")
}

/// =======================
/// SALES / ORDERS
/// =======================
model Order {
  id         BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  customerId BigInt        @map("customer_id") @db.UnsignedBigInt
  total      Decimal       @db.Decimal(12, 2)
  status     orders_status @default(paid)
  createdAt  DateTime      @default(now()) @map("created_at") @db.Timestamp(0)
  items      OrderItem[]
  customer   Customer      @relation(fields: [customerId], references: [id], map: "fk_orders_customer")

  @@index([createdAt], map: "idx_orders_created")
  @@index([customerId, createdAt], map: "idx_orders_customer_created")
  @@map("orders")
}

/// Order line items
model OrderItem {
  id        BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  orderId   BigInt  @map("order_id") @db.UnsignedBigInt
  productId BigInt  @map("product_id") @db.UnsignedBigInt
  qty       Int
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, map: "fk_order_items_order")
  product   Product @relation(fields: [productId], references: [id], map: "fk_order_items_product")

  @@index([orderId], map: "idx_order_items_order")
  @@index([productId], map: "idx_order_items_product")
  @@map("order_items")
}

model forecasts {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  product_id  BigInt   @db.UnsignedBigInt
  date        DateTime @db.Date
  demand_pred Int
  created_at  DateTime @default(now()) @db.Timestamp(0)
  products    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "fk_forecast_product")

  @@unique([product_id, date], map: "uq_forecast_product_date")
  @@index([date], map: "idx_forecast_date")
}

model recommendations {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  customer_id BigInt   @db.UnsignedBigInt
  product_id  BigInt   @db.UnsignedBigInt
  score       Decimal  @db.Decimal(6, 5)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  customers   Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade, map: "fk_reco_customer")
  products    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "fk_reco_product")

  @@unique([customer_id, product_id], map: "uq_reco_customer_product")
  @@index([product_id], map: "fk_reco_product")
}

enum orders_status {
  pending
  paid
  shipped
  cancelled
  refunded
}

enum users_role {
  admin
  manager
  analyst
}
